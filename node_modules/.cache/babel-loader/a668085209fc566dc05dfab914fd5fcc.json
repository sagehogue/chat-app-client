{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\components\\\\UI\\\\UserList\\\\UserList.jsx\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport UserBar from \"./UserBar/UserBar\"; // needs an icon, and some indicator that you can click this for a list of users\n\nconst DisplayBox = styled.section`\n  margin: auto;\n  min-height: 75vh;\n  min-width: 50vw;\n`;\nconst UserListHeading = styled.h3`\n  margin-bottom: 0.5rem;\n`;\nconst TopOfWindow = styled.div`\n  margin: 1.25rem auto 0 auto;\n  text-align: center;\n`;\nconst UserListSearchInput = styled.input`\n  padding: 0.25rem;\n  margin-bottom: 0.5rem;\n`;\nconst StyledHR = styled.hr`\n  max-width: 30vw;\n  opacity: 0.85;\n  margin: 0 auto;\n`;\nconst OnlineUsersList = styled.div`\n  margin: 1rem 2rem;\n`; // users is users in current room, location is room name, friends is any friends the user might have,\n// userID is the ID of the actual user in session\n\nconst UserList = ({\n  users,\n  location,\n  friends = false,\n  userID,\n  handleAddFriend,\n  handleRemoveFriend,\n  addFavoriteHandler,\n  removeFavoriteHandler\n}) => {\n  console.log(users);\n  let onlineUsers; // creates list of userbars from users prop\n\n  if (users) {\n    let isFriend = false;\n\n    if (friends) {\n      onlineUsers = users.map(user => {\n        console.log(`client user: ${userID}\\n user in room: ${user.id}`);\n        let profilePic = user.avatar || \"default\";\n\n        if (user.id == userID) {\n          return /*#__PURE__*/React.createElement(UserBar, {\n            avatar: profilePic,\n            username: user.displayName,\n            friend: isFriend,\n            id: userID,\n            isUser: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 13\n            }\n          });\n        } else {\n          let i;\n\n          for (i of friends) {\n            if (i.id == user.id) isFriend = i.isFriend;\n          }\n\n          return /*#__PURE__*/React.createElement(UserBar, {\n            avatar: profilePic,\n            username: user.displayName,\n            friend: isFriend,\n            id: user.id,\n            clientID: userID,\n            addFriendHandler: handleAddFriend,\n            removeFriendHandler: handleRemoveFriend,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }\n          });\n        }\n      });\n    } else {\n      onlineUsers = users.map(user => {\n        let profilePic = user.avatar || \"default\";\n\n        if (user.id == userID) {\n          return /*#__PURE__*/React.createElement(UserBar, {\n            avatar: profilePic,\n            username: user.displayName,\n            friend: isFriend,\n            id: userID,\n            isUser: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(UserBar, {\n            avatar: profilePic,\n            username: user.displayName,\n            friend: isFriend,\n            id: user.id,\n            clientID: userID,\n            addFriendHandler: handleAddFriend,\n            removeFriendHandler: handleRemoveFriend,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 13\n            }\n          });\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(DisplayBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TopOfWindow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserListHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Active Users in \", location), /*#__PURE__*/React.createElement(UserListSearchInput, {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StyledHR, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(OnlineUsersList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, onlineUsers));\n};\n\nexport default UserList;","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/components/UI/UserList/UserList.jsx"],"names":["React","styled","UserBar","DisplayBox","section","UserListHeading","h3","TopOfWindow","div","UserListSearchInput","input","StyledHR","hr","OnlineUsersList","UserList","users","location","friends","userID","handleAddFriend","handleRemoveFriend","addFavoriteHandler","removeFavoriteHandler","console","log","onlineUsers","isFriend","map","user","id","profilePic","avatar","displayName","i"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport UserBar from \"./UserBar/UserBar\";\r\n\r\n// needs an icon, and some indicator that you can click this for a list of users\r\n\r\nconst DisplayBox = styled.section`\r\n  margin: auto;\r\n  min-height: 75vh;\r\n  min-width: 50vw;\r\n`;\r\n\r\nconst UserListHeading = styled.h3`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst TopOfWindow = styled.div`\r\n  margin: 1.25rem auto 0 auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst UserListSearchInput = styled.input`\r\n  padding: 0.25rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst StyledHR = styled.hr`\r\n  max-width: 30vw;\r\n  opacity: 0.85;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst OnlineUsersList = styled.div`\r\n  margin: 1rem 2rem;\r\n`;\r\n\r\n// users is users in current room, location is room name, friends is any friends the user might have,\r\n// userID is the ID of the actual user in session\r\nconst UserList = ({\r\n  users,\r\n  location,\r\n  friends = false,\r\n  userID,\r\n  handleAddFriend,\r\n  handleRemoveFriend,\r\n  addFavoriteHandler,\r\n  removeFavoriteHandler,\r\n}) => {\r\n  console.log(users);\r\n  let onlineUsers;\r\n  // creates list of userbars from users prop\r\n  if (users) {\r\n    let isFriend = false;\r\n    if (friends) {\r\n      onlineUsers = users.map((user) => {\r\n        console.log(`client user: ${userID}\\n user in room: ${user.id}`);\r\n        let profilePic = user.avatar || \"default\";\r\n        if (user.id == userID) {\r\n          return (\r\n            <UserBar\r\n              avatar={profilePic}\r\n              username={user.displayName}\r\n              friend={isFriend}\r\n              id={userID}\r\n              isUser\r\n            />\r\n          );\r\n        } else {\r\n          let i;\r\n          for (i of friends) {\r\n            if (i.id == user.id) isFriend = i.isFriend;\r\n          }\r\n\r\n          return (\r\n            <UserBar\r\n              avatar={profilePic}\r\n              username={user.displayName}\r\n              friend={isFriend}\r\n              id={user.id}\r\n              clientID={userID}\r\n              addFriendHandler={handleAddFriend}\r\n              removeFriendHandler={handleRemoveFriend}\r\n            />\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      onlineUsers = users.map((user) => {\r\n        let profilePic = user.avatar || \"default\";\r\n        if (user.id == userID) {\r\n          return (\r\n            <UserBar\r\n              avatar={profilePic}\r\n              username={user.displayName}\r\n              friend={isFriend}\r\n              id={userID}\r\n              isUser\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <UserBar\r\n              avatar={profilePic}\r\n              username={user.displayName}\r\n              friend={isFriend}\r\n              id={user.id}\r\n              clientID={userID}\r\n              addFriendHandler={handleAddFriend}\r\n              removeFriendHandler={handleRemoveFriend}\r\n            />\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <DisplayBox>\r\n      <TopOfWindow>\r\n        <UserListHeading>Active Users in {location}</UserListHeading>\r\n        <UserListSearchInput type=\"text\" />\r\n        <StyledHR />\r\n      </TopOfWindow>\r\n      <OnlineUsersList>{onlineUsers}</OnlineUsersList>\r\n    </DisplayBox>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n"]},"metadata":{},"sourceType":"module"}
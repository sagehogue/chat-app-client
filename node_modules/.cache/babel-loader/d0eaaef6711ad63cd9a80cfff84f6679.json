{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\pages\\\\LoginPage\\\\LoginPage.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\"; // Firebase App (the core Firebase SDK) is always required and must be listed before other Firebase SDKs\n\nimport * as firebase from \"firebase/app\"; // Add the Firebase services that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"../../firebaseConfig\";\nimport { AuthContext, firebaseController } from \"../../App\";\nimport * as EmailValidator from \"email-validator\";\nimport background from \"../../img/background.jpg\";\nimport styled from \"styled-components\";\nimport { SubmitButton } from \"../../components/UI/Button/Button\";\nimport SignInButton from \"./SignInButton/SignInButton\";\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport RegisterButton from \"./RegisterButton/RegisterButton\";\nimport RegisterForm from \"./RegisterForm/RegisterForm\";\nimport GlobalStyle from \"../../util/GlobalStyles/GlobalStyles\";\nimport { fadeIn } from \"../../components/UI/Animations/Animations\";\nimport { Redirect } from \"react-router\"; // TODOS\n// 1.) Create a back button for the registration screen in case someone wants to cancel it and sign in.\n// 2.) Handle invalid email submissions - create some element that will tell them to correct it, and what the requirements are.\n\nconst AuthButtons = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst OuterFormContainer = styled.div`\n  display: flex;\n  overflow: hidden;\n  justify-content: center;\n  text-align: center;\n  height: 100vh;\n  align-items: center;\n  background: url(${background});\n  background-size: cover;\n  @media (min-width: 320px) and (max-width: 480px) {\n    height: 100%;\n  }\n`;\nconst FormStyleContainer = styled.div`\n  height: 65%;\n  width: 65%;\n  background-color: rgba(51, 51, 51, 0.75);\n  border-radius: 2%;\n  @media screen and (min-width: 800px) {\n    max-width: 45vw;\n  }\n  @media screen and (min-width: 1100px) {\n    max-width: 35vw;\n  }\n  @media screen and (min-width: 1300px) {\n    max-width: 25vw;\n  }\n  @media screen and (min-width: 1600px) {\n    max-width: 20vw;\n  }\n`;\nconst InnerFormContainer = styled.div`\n  margin: auto;\n  justify-content: center;\n  position: relative;\n  height: 60rem;\n  width: 25rem;\n  @media (min-width: 240px) and (max-width: 750px) {\n    width: 90%;\n  }\n  @media screen and (min-width: 750px) {\n    width: 75%;\n  }\n  @media screen and (min-width: 1100px) {\n    width: 65%;\n  }\n\n  @media screen and (min-width: 1600px) {\n    width: 60%;\n  }\n`;\nconst Heading = styled.h1`\n  color: white;\n  font-size: 3rem;\n  font-family: \"Josefin Sans\", sans-serif;\n  padding-bottom: 10px;\n  margin-top: 1rem;\n  @media (max-width: 300px) {\n    font-size: 2.5rem;\n  }\n`;\nconst EmailInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\nconst PasswordInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  margin-top: 20px;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\nexport default function LoginPage() {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [heading, setHeading] = useState(\"Chatter\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authenticated, setAuthenticated] = useState(false);\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\n  let userAuth = useContext(AuthContext);\n\n  if (userAuth.loggedIn) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const handleDisplayRegisterForm = () => {\n    // changes the variable that controls which form is displayed\n    setShowRegisterForm(true);\n    setHeading(\"Registration\");\n  };\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const email = form.email.value;\n    const password = form.password.value;\n    firebase.auth().signInWithEmailAndPassword(email, password).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n    });\n  };\n\n  const handleRegisterSubmit = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.target;\n    const email = form.email.value;\n    const username = form.username.value;\n    const password = form.password.value;\n    const validEmail = EmailValidator.validate(email);\n\n    if (validEmail) {\n      // Create new account\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(res => {\n        const user = firebase.auth().currentUser; // This is how you update properties on the profile.\n\n        user.updateProfile({\n          displayName: username\n        }).then(function () {// Update successful.\n          // Code to prepare the room join screen goes here.\n        }).catch(function (error) {\n          return alert(\"Error! Account failed to update. Error: \" + error);\n        });\n        setHeading(\"Chatter\");\n      }).catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        alert(`ERROR ${errorCode}\\n\n          ${error.message}`); // ...\n      });\n    } else {\n      alert(\"ERROR\\nPlease enter a valid email\\nAddress must be formatted <6+ letters>@<domain>.<tld>\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(OuterFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormStyleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InnerFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoginForm, {\n    showRegisterForm: showRegisterForm,\n    onSubmit: handleLoginSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, `${heading}`), /*#__PURE__*/React.createElement(EmailInput, {\n    required: true,\n    placeholder: \"Email\",\n    name: \"email\",\n    type: \"text\",\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PasswordInput, {\n    required: true,\n    placeholder: \"Password\",\n    name: \"password\",\n    type: \"password\",\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AuthButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SignInButton, {\n    type: \"submit\",\n    value: \"Sign In\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RegisterButton, {\n    clickHandler: () => handleDisplayRegisterForm(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(RegisterForm, {\n    heading: heading,\n    showRegisterForm: showRegisterForm,\n    handleSubmit: handleRegisterSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/pages/LoginPage/LoginPage.js"],"names":["React","useState","useEffect","useContext","Link","firebase","firebaseConfig","AuthContext","firebaseController","EmailValidator","background","styled","SubmitButton","SignInButton","LoginForm","RegisterButton","RegisterForm","GlobalStyle","fadeIn","Redirect","AuthButtons","div","OuterFormContainer","FormStyleContainer","InnerFormContainer","Heading","h1","EmailInput","input","PasswordInput","LoginPage","name","setName","room","setRoom","heading","setHeading","email","setEmail","password","setPassword","authenticated","setAuthenticated","showRegisterForm","setShowRegisterForm","userAuth","loggedIn","handleDisplayRegisterForm","handleLoginSubmit","e","preventDefault","form","target","value","auth","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","handleRegisterSubmit","stopPropagation","username","validEmail","validate","createUserWithEmailAndPassword","then","res","user","currentUser","updateProfile","displayName","alert","event"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\n// Firebase App (the core Firebase SDK) is always required and must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\";\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"../../firebaseConfig\";\nimport { AuthContext, firebaseController } from \"../../App\";\nimport * as EmailValidator from \"email-validator\";\n\nimport background from \"../../img/background.jpg\";\nimport styled from \"styled-components\";\nimport { SubmitButton } from \"../../components/UI/Button/Button\";\nimport SignInButton from \"./SignInButton/SignInButton\";\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport RegisterButton from \"./RegisterButton/RegisterButton\";\nimport RegisterForm from \"./RegisterForm/RegisterForm\";\nimport GlobalStyle from \"../../util/GlobalStyles/GlobalStyles\";\nimport { fadeIn } from \"../../components/UI/Animations/Animations\";\n\nimport { Redirect } from \"react-router\";\n\n// TODOS\n// 1.) Create a back button for the registration screen in case someone wants to cancel it and sign in.\n// 2.) Handle invalid email submissions - create some element that will tell them to correct it, and what the requirements are.\n\nconst AuthButtons = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst OuterFormContainer = styled.div`\n  display: flex;\n  overflow: hidden;\n  justify-content: center;\n  text-align: center;\n  height: 100vh;\n  align-items: center;\n  background: url(${background});\n  background-size: cover;\n  @media (min-width: 320px) and (max-width: 480px) {\n    height: 100%;\n  }\n`;\nconst FormStyleContainer = styled.div`\n  height: 65%;\n  width: 65%;\n  background-color: rgba(51, 51, 51, 0.75);\n  border-radius: 2%;\n  @media screen and (min-width: 800px) {\n    max-width: 45vw;\n  }\n  @media screen and (min-width: 1100px) {\n    max-width: 35vw;\n  }\n  @media screen and (min-width: 1300px) {\n    max-width: 25vw;\n  }\n  @media screen and (min-width: 1600px) {\n    max-width: 20vw;\n  }\n`;\nconst InnerFormContainer = styled.div`\n  margin: auto;\n  justify-content: center;\n  position: relative;\n  height: 60rem;\n  width: 25rem;\n  @media (min-width: 240px) and (max-width: 750px) {\n    width: 90%;\n  }\n  @media screen and (min-width: 750px) {\n    width: 75%;\n  }\n  @media screen and (min-width: 1100px) {\n    width: 65%;\n  }\n\n  @media screen and (min-width: 1600px) {\n    width: 60%;\n  }\n`;\n\nconst Heading = styled.h1`\n  color: white;\n  font-size: 3rem;\n  font-family: \"Josefin Sans\", sans-serif;\n  padding-bottom: 10px;\n  margin-top: 1rem;\n  @media (max-width: 300px) {\n    font-size: 2.5rem;\n  }\n`;\nconst EmailInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\n\nconst PasswordInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  margin-top: 20px;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\n\nexport default function LoginPage() {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [heading, setHeading] = useState(\"Chatter\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authenticated, setAuthenticated] = useState(false);\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\n  let userAuth = useContext(AuthContext);\n  if (userAuth.loggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleDisplayRegisterForm = () => {\n    // changes the variable that controls which form is displayed\n    setShowRegisterForm(true);\n    setHeading(\"Registration\");\n  };\n\n  const handleLoginSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    const email = form.email.value;\n    const password = form.password.value;\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n\n  const handleRegisterSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.target;\n    const email = form.email.value;\n    const username = form.username.value;\n    const password = form.password.value;\n    const validEmail = EmailValidator.validate(email);\n    if (validEmail) {\n      // Create new account\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then((res) => {\n          const user = firebase.auth().currentUser;\n\n          // This is how you update properties on the profile.\n          user\n            .updateProfile({\n              displayName: username,\n            })\n            .then(function () {\n              // Update successful.\n              // Code to prepare the room join screen goes here.\n            })\n            .catch(function (error) {\n              return alert(\"Error! Account failed to update. Error: \" + error);\n            });\n          setHeading(\"Chatter\");\n        })\n        .catch(function (error) {\n          // Handle Errors here.\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          alert(\n            `ERROR ${errorCode}\\n\n          ${error.message}`\n          );\n          // ...\n        });\n    } else {\n      alert(\n        \"ERROR\\nPlease enter a valid email\\nAddress must be formatted <6+ letters>@<domain>.<tld>\"\n      );\n    }\n  };\n\n  return (\n    <OuterFormContainer>\n      <GlobalStyle />\n      <FormStyleContainer>\n        <InnerFormContainer>\n          <LoginForm\n            showRegisterForm={showRegisterForm}\n            onSubmit={handleLoginSubmit}\n          >\n            <Heading>{`${heading}`}</Heading>\n            <EmailInput\n              required\n              placeholder=\"Email\"\n              name=\"email\"\n              type=\"text\"\n              onChange={(event) => setEmail(event.target.value)}\n            />\n\n            <PasswordInput\n              required\n              placeholder=\"Password\"\n              name=\"password\"\n              type=\"password\"\n              onChange={(event) => setPassword(event.target.value)}\n            />\n\n            <AuthButtons>\n              <SignInButton type=\"submit\" value=\"Sign In\" />\n              <RegisterButton\n                clickHandler={() => handleDisplayRegisterForm()}\n              />\n            </AuthButtons>\n          </LoginForm>\n          <RegisterForm\n            heading={heading}\n            showRegisterForm={showRegisterForm}\n            handleSubmit={handleRegisterSubmit}\n          />\n        </InnerFormContainer>\n      </FormStyleContainer>\n    </OuterFormContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
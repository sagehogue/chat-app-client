{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\pages\\\\HomePage\\\\NewRoomModal\\\\NewRoomModal.jsx\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"../../../components/UI/Modal/Modal\"; // [TODOS]\n// Create a way to invite users to room as soon as it is created.\n\nconst Styles = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  text-align: center;\n`;\nconst Heading = styled.h3`\n  margin-top: 2rem;\n  text-align: center;\n`;\nconst Label = styled.label`\n  text-align: center;\n  display: block;\n  margin-top: 1.25rem;\n`;\nconst CreateRoomForm = styled.form`\n  margin-top: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  height: 75%;\n`;\nconst FormInput = styled.input`\n  display: block;\n  margin: ${props => props.centered ? \"0 auto 0 auto\" : \"0\"};\n  width: 100%;\n`;\nconst SubmitButton = styled.button`\n  margin-top: auto;\n`;\nconst ConfirmPasswordInput = styled(FormInput)`\n  &::after {\n    content: ${props => props.passwordMatch ? \"\" : \"Passwords do not match\"};\n  }\n`;\nconst ErrorBox = styled.div`\n  color: red;\n  font-size: 1.5rem;\n`;\nexport default function NewRoomModal({\n  visible,\n  submitHandler,\n  closeHandler,\n  user\n}) {\n  const [name, setName] = useState(\"\");\n  const [passwordProtected, setPasswordProtected] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordsMatch, setPasswordsMatch] = useState(false);\n\n  const handleChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const inputName = target.name;\n\n    switch (inputName) {\n      case \"roomName\":\n        setName(value); // check if roomName is taken\n\n        return;\n\n      case \"isPasswordProtected\":\n        setPasswordProtected(value);\n        return;\n\n      case \"password\":\n        setPassword(value);\n\n        if (confirmPassword) {\n          setPasswordsMatch(value == confirmPassword);\n        }\n\n        return;\n\n      case \"confirmPassword\":\n        setConfirmPassword(value);\n        console.log(password, value, password == value);\n        setPasswordsMatch(password == value);\n        return;\n    }\n  };\n\n  const clearInputs = () => {\n    setName(\"\");\n    setPasswordProtected(false);\n    setPassword(\"\");\n    setConfirmPassword(\"\");\n    setPasswordsMatch(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      roomName: name,\n      passwordProtected: passwordProtected,\n      password: password,\n      creator: user.displayName\n    };\n    submitHandler(data);\n  };\n\n  if (visible == false && (name || password || confirmPassword || passwordProtected)) {\n    clearInputs();\n  }\n\n  return /*#__PURE__*/React.createElement(Styles, {\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"Create New Room\"), /*#__PURE__*/React.createElement(CreateRoomForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"Name:\", /*#__PURE__*/React.createElement(FormInput, {\n    type: \"text\",\n    value: name,\n    name: \"roomName\",\n    onChange: handleChange,\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"Password Protected?\", /*#__PURE__*/React.createElement(FormInput, {\n    name: \"isPasswordProtected\",\n    type: \"checkbox\",\n    checked: passwordProtected,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  })), passwordProtected ? /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Password:\", /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    onChange: handleChange,\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  })) : null, passwordProtected ? /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Confirm Password:\", /*#__PURE__*/React.createElement(ConfirmPasswordInput, {\n    name: \"confirmPassword\",\n    type: \"password\",\n    value: confirmPassword,\n    onChange: handleChange,\n    centered: true,\n    passwordMatch: passwordsMatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  })) : null, /*#__PURE__*/React.createElement(SubmitButton, {\n    type: \"submit\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/pages/HomePage/NewRoomModal/NewRoomModal.jsx"],"names":["React","useState","styled","Modal","Styles","Heading","h3","Label","label","CreateRoomForm","form","FormInput","input","props","centered","SubmitButton","button","ConfirmPasswordInput","passwordMatch","ErrorBox","div","NewRoomModal","visible","submitHandler","closeHandler","user","name","setName","passwordProtected","setPasswordProtected","password","setPassword","confirmPassword","setConfirmPassword","passwordsMatch","setPasswordsMatch","handleChange","event","target","value","type","checked","inputName","console","log","clearInputs","handleSubmit","preventDefault","data","roomName","creator","displayName"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Modal from \"../../../components/UI/Modal/Modal\";\n\n// [TODOS]\n\n// Create a way to invite users to room as soon as it is created.\n\nconst Styles = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  text-align: center;\n`;\n\nconst Heading = styled.h3`\n  margin-top: 2rem;\n  text-align: center;\n`;\n\nconst Label = styled.label`\n  text-align: center;\n  display: block;\n  margin-top: 1.25rem;\n`;\n\nconst CreateRoomForm = styled.form`\n  margin-top: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  height: 75%;\n`;\n\nconst FormInput = styled.input`\n  display: block;\n  margin: ${(props) => (props.centered ? \"0 auto 0 auto\" : \"0\")};\n  width: 100%;\n`;\n\nconst SubmitButton = styled.button`\n  margin-top: auto;\n`;\n\nconst ConfirmPasswordInput = styled(FormInput)`\n  &::after {\n    content: ${(props) =>\n      props.passwordMatch ? \"\" : \"Passwords do not match\"};\n  }\n`;\n\nconst ErrorBox = styled.div`\n  color: red;\n  font-size: 1.5rem;\n`;\n\nexport default function NewRoomModal({\n  visible,\n  submitHandler,\n  closeHandler,\n  user,\n}) {\n  const [name, setName] = useState(\"\");\n  const [passwordProtected, setPasswordProtected] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordsMatch, setPasswordsMatch] = useState(false);\n  const handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const inputName = target.name;\n\n    switch (inputName) {\n      case \"roomName\":\n        setName(value);\n        // check if roomName is taken\n        return;\n      case \"isPasswordProtected\":\n        setPasswordProtected(value);\n        return;\n      case \"password\":\n        setPassword(value);\n        if (confirmPassword) {\n          setPasswordsMatch(value == confirmPassword);\n        }\n        return;\n      case \"confirmPassword\":\n        setConfirmPassword(value);\n        console.log(password, value, password == value);\n        setPasswordsMatch(password == value);\n        return;\n    }\n  };\n\n  const clearInputs = () => {\n    setName(\"\");\n    setPasswordProtected(false);\n    setPassword(\"\");\n    setConfirmPassword(\"\");\n    setPasswordsMatch(false);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const data = {\n      roomName: name,\n      passwordProtected: passwordProtected,\n      password: password,\n      creator: user.displayName,\n    };\n    submitHandler(data);\n  };\n  if (\n    visible == false &&\n    (name || password || confirmPassword || passwordProtected)\n  ) {\n    clearInputs();\n  }\n  return (\n    <Styles visible={visible}>\n      <Heading>Create New Room</Heading>\n      <CreateRoomForm>\n        <Label>\n          Name:\n          <FormInput\n            type=\"text\"\n            value={name}\n            name={\"roomName\"}\n            onChange={handleChange}\n            centered\n          />\n        </Label>\n        <Label>\n          Password Protected?\n          <FormInput\n            name=\"isPasswordProtected\"\n            type=\"checkbox\"\n            checked={passwordProtected}\n            onChange={handleChange}\n          />\n        </Label>\n        {passwordProtected ? (\n          <Label>\n            Password:\n            <FormInput\n              name=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={handleChange}\n              centered\n            />\n          </Label>\n        ) : null}\n        {passwordProtected ? (\n          <Label>\n            Confirm Password:\n            <ConfirmPasswordInput\n              name=\"confirmPassword\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={handleChange}\n              centered\n              passwordMatch={passwordsMatch}\n            />\n          </Label>\n        ) : null}\n        <SubmitButton type=\"submit\" onClick={handleSubmit}>\n          Submit\n        </SubmitButton>\n      </CreateRoomForm>\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
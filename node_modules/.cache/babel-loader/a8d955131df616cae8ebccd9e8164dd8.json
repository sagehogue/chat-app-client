{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\components\\\\Chat\\\\Chat.js\";\nimport React, { useState, useEffect } from \"react\"; // import queryString from \"query-string\"; // This was used to determine name/room\n\nimport io from \"socket.io-client\";\nimport styled from \"styled-components\";\nimport UserList from \"../UI/UserList/UserList\";\nimport TextContainer from \"./TextContainer/TextContainer\";\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"./InfoBar/InfoBar\";\nimport Input from \"../UI/Input/Input\";\nimport Theme from \"../../util/Theme/Theme\";\nimport { getCurrentTime, sortByDate } from \"../../util/helpers/helpers.js\"; // TODOS:\n// Create component to display users in room\n// Make chat window draggable for users who wanna write textwalls\n// Create roomDisconnect event to fire when user clicks X on chat window, thus leaving the chat.\n\nconst OuterContainer = styled.div`\n  display: flex;\n  position: relative;\n  grid-row: ${Theme.layout.gridRowChat};\n  grid-column: ${Theme.layout.gridColChat};\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     height: 100%;\n  //   }\n`;\nconst Container = styled.div`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  background: #ffffff;\n  border-radius: 0.8rem;\n  height: 84vh;\n  width: 58vw;\n  z-index: ${props => props.showUsers ? \"0\" : Theme.zIndex.chat};\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     .container {\n  //       width: 100%;\n  //       height: 100%;\n  //     }\n  //     @media (min-width: 480px) and (max-width: 1200px) {\n  //       .container {\n  //         width: 60%;\n  //       }\n`;\nconst UserListContainer = styled(Container)`\n  z-index: ${props => props.showUsers ? Theme.zIndex.modal : \"0\"};\n  position: absolute;\n  height: 75vh;\n  width: 50vw;\n`;\n\nconst Chat = ({\n  room = false,\n  user,\n  closeChatHandler,\n  openBackdrop,\n  socket,\n  showUsers,\n  setShowUsers,\n  handleAddFriend,\n  handleRemoveFriend,\n  userRooms\n}) => {\n  const [username, setUsername] = useState(user.displayName); // Controls which chat room is displayed on screen\n\n  const [currentRoom, setRoom] = useState(room); // Users in current room, self and others\n\n  const [users, setUsers] = useState(\"\"); // A count of the above data\n\n  const [onlineUserCount, setOnlineUserCount] = useState(0); // Message  you are currently typing, yet to be sent to server/other users\n\n  const [message, setMessage] = useState(\"\"); // Messages in memory, including messages retrieved from server and temporary messages from SYSTEM\n\n  const [messages, setMessages] = useState([]); // PROD\n  // const ENDPOINT = \"https://react-chat-network-app.herokuapp.com/\";\n  // TESTING\n\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    // OLD LOGIC - Fetches username, room from url. Convert to state.\n    // const { name, room } = queryString.parse(location.search);\n\n    /* socket = io(ENDPOINT); */\n    // Sets state equal to current room, stores Username\n    setRoom(currentRoom); // setUsername(username);\n\n    console.log(\"CURRENT ROOM\" + JSON.stringify(currentRoom)); // Fires socket.io \"join\" event when room state changes.\n    //\n    // socket.emit(\"join\", { name: username, room: currentRoom }, (error) => {\n    //     if (error) {\n    //         alert(error);\n    //     }\n    // });\n  }, [ENDPOINT, currentRoom]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    }); // Message history of room you are currently in, retrieved from server\n\n    socket.on(\"messageHistory\", messageHistory => {\n      if (messageHistory) {\n        sortByDate(messageHistory);\n        messageHistory.forEach(msg => {\n          if (msg.time) {\n            setMessages(messages => [...messages, msg]);\n          }\n        });\n      }\n    }); // List of currently active users in room\n\n    socket.on(\"roomData\", ({\n      room,\n      users,\n      onlineUserCount\n    }) => {\n      console.log(`Room Data: \\n${users}`);\n      setUsers(users);\n      setOnlineUserCount(users.length);\n      console.log(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n    console.log({\n      content: {\n        text: message,\n        user: username,\n        time: getCurrentTime(),\n        room: currentRoom,\n        uid: user.uid\n      }\n    });\n\n    if (message) {\n      socket.emit(\"sendMessage\", {\n        content: {\n          text: message,\n          user: username,\n          time: getCurrentTime(),\n          room: currentRoom.id,\n          uid: user.uid\n        }\n      }, () => setMessage(\"\"));\n      const newMessage = {\n        text: message,\n        time: getCurrentTime(),\n        user: username,\n        room: currentRoom,\n        uid: user.uid\n      };\n      setMessages(messages => [...messages, newMessage]);\n    }\n  }; // Opens user list\n\n\n  const showUserDisplay = () => {\n    openBackdrop();\n    setShowUsers(true);\n  };\n\n  let id = currentRoom.id;\n  let isSavedRoom = false;\n  let isFavoriteRoom = false;\n  userRooms.map(room => {\n    if (room.id === id) {\n      isSavedRoom = true;\n    }\n  });\n  userRooms.map(room => {\n    console.log(\"test\");\n\n    if (room.id === id) {\n      isFavoriteRoom = true;\n    }\n  });\n  return /*#__PURE__*/React.createElement(OuterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    showUsers: showUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: currentRoom.roomName,\n    userCount: onlineUserCount,\n    showUserList: showUserDisplay,\n    closeChatHandler: () => closeChatHandler(currentRoom),\n    userRooms: userRooms,\n    isUserSavedRoom: isSavedRoom,\n    isUserFavoriteRoom: isFavoriteRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(UserListContainer, {\n    showUsers: showUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserList, {\n    users: users,\n    location: currentRoom.roomName,\n    userID: user.uid,\n    handleAddFriend: handleAddFriend,\n    handleRemoveFriend: handleRemoveFriend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","styled","UserList","TextContainer","Messages","InfoBar","Input","Theme","getCurrentTime","sortByDate","OuterContainer","div","layout","gridRowChat","gridColChat","Container","props","showUsers","zIndex","chat","UserListContainer","modal","Chat","room","user","closeChatHandler","openBackdrop","socket","setShowUsers","handleAddFriend","handleRemoveFriend","userRooms","username","setUsername","displayName","currentRoom","setRoom","users","setUsers","onlineUserCount","setOnlineUserCount","message","setMessage","messages","setMessages","ENDPOINT","console","log","JSON","stringify","on","messageHistory","forEach","msg","time","length","sendMessage","event","preventDefault","content","text","uid","emit","id","newMessage","showUserDisplay","isSavedRoom","isFavoriteRoom","map","roomName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// import queryString from \"query-string\"; // This was used to determine name/room\r\nimport io from \"socket.io-client\";\r\nimport styled from \"styled-components\";\r\n\r\nimport UserList from \"../UI/UserList/UserList\";\r\nimport TextContainer from \"./TextContainer/TextContainer\";\r\nimport Messages from \"../Messages/Messages\";\r\nimport InfoBar from \"./InfoBar/InfoBar\";\r\nimport Input from \"../UI/Input/Input\";\r\nimport Theme from \"../../util/Theme/Theme\";\r\n\r\nimport { getCurrentTime, sortByDate } from \"../../util/helpers/helpers.js\";\r\n\r\n// TODOS:\r\n\r\n// Create component to display users in room\r\n// Make chat window draggable for users who wanna write textwalls\r\n// Create roomDisconnect event to fire when user clicks X on chat window, thus leaving the chat.\r\n\r\nconst OuterContainer = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n  grid-row: ${Theme.layout.gridRowChat};\r\n  grid-column: ${Theme.layout.gridColChat};\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: auto;\r\n  //   @media (min-width: 320px) and (max-width: 480px) {\r\n  //     height: 100%;\r\n  //   }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  background: #ffffff;\r\n  border-radius: 0.8rem;\r\n  height: 84vh;\r\n  width: 58vw;\r\n  z-index: ${(props) => (props.showUsers ? \"0\" : Theme.zIndex.chat)};\r\n  //   @media (min-width: 320px) and (max-width: 480px) {\r\n  //     .container {\r\n  //       width: 100%;\r\n  //       height: 100%;\r\n  //     }\r\n  //     @media (min-width: 480px) and (max-width: 1200px) {\r\n  //       .container {\r\n  //         width: 60%;\r\n  //       }\r\n`;\r\n\r\nconst UserListContainer = styled(Container)`\r\n  z-index: ${(props) => (props.showUsers ? Theme.zIndex.modal : \"0\")};\r\n  position: absolute;\r\n  height: 75vh;\r\n  width: 50vw;\r\n`;\r\n\r\nconst Chat = ({\r\n  room = false,\r\n  user,\r\n  closeChatHandler,\r\n  openBackdrop,\r\n  socket,\r\n  showUsers,\r\n  setShowUsers,\r\n  handleAddFriend,\r\n  handleRemoveFriend,\r\n  userRooms,\r\n}) => {\r\n  const [username, setUsername] = useState(user.displayName);\r\n  // Controls which chat room is displayed on screen\r\n  const [currentRoom, setRoom] = useState(room);\r\n  // Users in current room, self and others\r\n  const [users, setUsers] = useState(\"\");\r\n  // A count of the above data\r\n  const [onlineUserCount, setOnlineUserCount] = useState(0);\r\n  // Message  you are currently typing, yet to be sent to server/other users\r\n  const [message, setMessage] = useState(\"\");\r\n  // Messages in memory, including messages retrieved from server and temporary messages from SYSTEM\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // PROD\r\n  // const ENDPOINT = \"https://react-chat-network-app.herokuapp.com/\";\r\n  // TESTING\r\n  const ENDPOINT = \"localhost:5000\";\r\n\r\n  useEffect(() => {\r\n    // OLD LOGIC - Fetches username, room from url. Convert to state.\r\n    // const { name, room } = queryString.parse(location.search);\r\n\r\n    /* socket = io(ENDPOINT); */\r\n    // Sets state equal to current room, stores Username\r\n    setRoom(currentRoom);\r\n    // setUsername(username);\r\n    console.log(\"CURRENT ROOM\" + JSON.stringify(currentRoom));\r\n    // Fires socket.io \"join\" event when room state changes.\r\n    //\r\n    // socket.emit(\"join\", { name: username, room: currentRoom }, (error) => {\r\n    //     if (error) {\r\n    //         alert(error);\r\n    //     }\r\n    // });\r\n  }, [ENDPOINT, currentRoom]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      setMessages((messages) => [...messages, message]);\r\n    });\r\n\r\n    // Message history of room you are currently in, retrieved from server\r\n    socket.on(\"messageHistory\", (messageHistory) => {\r\n      if (messageHistory) {\r\n        sortByDate(messageHistory);\r\n        messageHistory.forEach((msg) => {\r\n          if (msg.time) {\r\n            setMessages((messages) => [...messages, msg]);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // List of currently active users in room\r\n    socket.on(\"roomData\", ({ room, users, onlineUserCount }) => {\r\n      console.log(`Room Data: \\n${users}`);\r\n      setUsers(users);\r\n      setOnlineUserCount(users.length);\r\n      console.log(users);\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    console.log({\r\n      content: {\r\n        text: message,\r\n        user: username,\r\n        time: getCurrentTime(),\r\n        room: currentRoom,\r\n        uid: user.uid,\r\n      },\r\n    });\r\n    if (message) {\r\n      socket.emit(\r\n        \"sendMessage\",\r\n        {\r\n          content: {\r\n            text: message,\r\n            user: username,\r\n            time: getCurrentTime(),\r\n            room: currentRoom.id,\r\n            uid: user.uid,\r\n          },\r\n        },\r\n        () => setMessage(\"\")\r\n      );\r\n      const newMessage = {\r\n        text: message,\r\n        time: getCurrentTime(),\r\n        user: username,\r\n        room: currentRoom,\r\n        uid: user.uid,\r\n      };\r\n      setMessages((messages) => [...messages, newMessage]);\r\n    }\r\n  };\r\n\r\n  // Opens user list\r\n  const showUserDisplay = () => {\r\n    openBackdrop();\r\n    setShowUsers(true);\r\n  };\r\n\r\n  let id = currentRoom.id;\r\n  let isSavedRoom = false;\r\n  let isFavoriteRoom = false;\r\n\r\n  userRooms.map((room) => {\r\n    if (room.id === id) {\r\n      isSavedRoom = true;\r\n    }\r\n  });\r\n\r\n  userRooms.map((room) => {\r\n    console.log(\"test\");\r\n    if (room.id === id) {\r\n      isFavoriteRoom = true;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <OuterContainer>\r\n      <Container showUsers={showUsers}>\r\n        <InfoBar\r\n          room={currentRoom.roomName}\r\n          userCount={onlineUserCount}\r\n          showUserList={showUserDisplay}\r\n          closeChatHandler={() => closeChatHandler(currentRoom)}\r\n          userRooms={userRooms}\r\n          isUserSavedRoom={isSavedRoom}\r\n          isUserFavoriteRoom={isFavoriteRoom}\r\n        />\r\n        <Messages messages={messages} name={username} />\r\n        <Input\r\n          message={message}\r\n          setMessage={setMessage}\r\n          sendMessage={sendMessage}\r\n        />\r\n      </Container>\r\n      <UserListContainer showUsers={showUsers}>\r\n        <UserList\r\n          users={users}\r\n          location={currentRoom.roomName}\r\n          userID={user.uid}\r\n          handleAddFriend={handleAddFriend}\r\n          handleRemoveFriend={handleRemoveFriend}\r\n        />\r\n      </UserListContainer>\r\n    </OuterContainer>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}
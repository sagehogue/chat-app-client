{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\components\\\\Chat\\\\Chat.js\";\nimport React, { useState, useEffect } from \"react\"; // import queryString from \"query-string\"; // This was used to determine name/room\n\nimport io from \"socket.io-client\";\nimport styled from \"styled-components\";\nimport UserList from \"../UI/UserList/UserList\";\nimport TextContainer from \"./TextContainer/TextContainer\";\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"./InfoBar/InfoBar\";\nimport Input from \"../UI/Input/Input\";\nimport Theme from \"../../util/Theme/Theme\";\nimport { getCurrentTime, sortByDate } from \"../../util/helpers/helpers.js\"; // TODOS:\n// Create component to display users in room\n// Make chat window draggable for users who wanna write textwalls\n// Create roomDisconnect event to fire when user clicks X on chat window, thus leaving the chat.\n\nconst OuterContainer = styled.div`\n  display: flex;\n  position: relative;\n  grid-row: ${Theme.layout.gridRowChat};\n  grid-column: ${Theme.layout.gridColChat};\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     height: 100%;\n  //   }\n`;\nconst Container = styled.div`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  background: #ffffff;\n  border-radius: 0.8rem;\n  height: 84vh;\n  width: 58vw;\n  z-index: ${props => props.showUsers ? \"0\" : Theme.zIndex.chat};\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     .container {\n  //       width: 100%;\n  //       height: 100%;\n  //     }\n  //     @media (min-width: 480px) and (max-width: 1200px) {\n  //       .container {\n  //         width: 60%;\n  //       }\n`;\nconst UserListContainer = styled(Container)`\n  z-index: ${props => props.showUsers ? Theme.zIndex.modal : \"0\"};\n  position: absolute;\n  height: 75vh;\n  width: 50vw;\n`;\n\nconst Chat = ({\n  room = false,\n  user,\n  closeChatHandler,\n  openBackdrop,\n  socket,\n  showUsers,\n  setShowUsers\n}) => {\n  const [username, setUsername] = useState(user.displayName); // Controls which chat room is displayed on screen\n\n  const [currentRoom, setRoom] = useState(room); // Users in current room, self and others\n\n  const [users, setUsers] = useState(\"\"); // A count of the above data\n\n  const [onlineUserCount, setOnlineUserCount] = useState(0); // Message  you are currently typing, yet to be sent to server/other users\n\n  const [message, setMessage] = useState(\"\"); // Messages in memory, including messages retrieved from server and temporary messages from SYSTEM\n\n  const [messages, setMessages] = useState([]); // PROD\n  // const ENDPOINT = \"https://react-chat-network-app.herokuapp.com/\";\n  // TESTING\n\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    // OLD LOGIC - Fetches username, room from url. Convert to state.\n    // const { name, room } = queryString.parse(location.search);\n\n    /* socket = io(ENDPOINT); */\n    // Sets state equal to current room, stores Username\n    setRoom(currentRoom); // setUsername(username);\n    // Fires socket.io \"join\" event when room state changes.\n    //\n    // socket.emit(\"join\", { name: username, room: currentRoom }, (error) => {\n    //     if (error) {\n    //         alert(error);\n    //     }\n    // });\n  }, [ENDPOINT, currentRoom]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    }); // Message history of room you are currently in, retrieved from server\n\n    socket.on(\"messageHistory\", messageHistory => {\n      if (messageHistory) {\n        sortByDate(messageHistory);\n        messageHistory.forEach(msg => {\n          if (msg.time) {\n            setMessages(messages => [...messages, msg]);\n          }\n        });\n      }\n    }); // List of currently active users in room\n\n    socket.on(\"roomData\", ({\n      room,\n      users,\n      onlineUserCount\n    }) => {\n      console.log(`Room Data: \\n${users}`);\n      setUsers(users);\n      setOnlineUserCount(users.length);\n      console.log(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n    console.log({\n      content: {\n        text: message,\n        user: username,\n        time: getCurrentTime(),\n        room: currentRoom\n      }\n    });\n\n    if (message) {\n      socket.emit(\"sendMessage\", {\n        content: {\n          text: message,\n          user: username,\n          time: getCurrentTime(),\n          room: currentRoom\n        }\n      }, () => setMessage(\"\"));\n      const newMessage = {\n        text: message,\n        time: getCurrentTime(),\n        user: username,\n        room: currentRoom\n      };\n      setMessages(messages => [...messages, newMessage]);\n    }\n  }; // Opens user list\n\n\n  const showUserDisplay = () => {\n    openBackdrop();\n    setShowUsers(true);\n  };\n\n  return /*#__PURE__*/React.createElement(OuterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    showUsers: showUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: currentRoom,\n    userCount: onlineUserCount,\n    showUserList: showUserDisplay,\n    closeChatHandler: () => closeChatHandler(currentRoom),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(UserListContainer, {\n    showUsers: showUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserList, {\n    users: users,\n    location: currentRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","styled","UserList","TextContainer","Messages","InfoBar","Input","Theme","getCurrentTime","sortByDate","OuterContainer","div","layout","gridRowChat","gridColChat","Container","props","showUsers","zIndex","chat","UserListContainer","modal","Chat","room","user","closeChatHandler","openBackdrop","socket","setShowUsers","username","setUsername","displayName","currentRoom","setRoom","users","setUsers","onlineUserCount","setOnlineUserCount","message","setMessage","messages","setMessages","ENDPOINT","on","messageHistory","forEach","msg","time","console","log","length","sendMessage","event","preventDefault","content","text","emit","newMessage","showUserDisplay"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import queryString from \"query-string\"; // This was used to determine name/room\nimport io from \"socket.io-client\";\nimport styled from \"styled-components\";\n\nimport UserList from \"../UI/UserList/UserList\";\nimport TextContainer from \"./TextContainer/TextContainer\";\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"./InfoBar/InfoBar\";\nimport Input from \"../UI/Input/Input\";\nimport Theme from \"../../util/Theme/Theme\";\n\nimport { getCurrentTime, sortByDate } from \"../../util/helpers/helpers.js\";\n\n// TODOS:\n\n// Create component to display users in room\n// Make chat window draggable for users who wanna write textwalls\n// Create roomDisconnect event to fire when user clicks X on chat window, thus leaving the chat.\n\nconst OuterContainer = styled.div`\n  display: flex;\n  position: relative;\n  grid-row: ${Theme.layout.gridRowChat};\n  grid-column: ${Theme.layout.gridColChat};\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     height: 100%;\n  //   }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  background: #ffffff;\n  border-radius: 0.8rem;\n  height: 84vh;\n  width: 58vw;\n  z-index: ${(props) => (props.showUsers ? \"0\" : Theme.zIndex.chat)};\n  //   @media (min-width: 320px) and (max-width: 480px) {\n  //     .container {\n  //       width: 100%;\n  //       height: 100%;\n  //     }\n  //     @media (min-width: 480px) and (max-width: 1200px) {\n  //       .container {\n  //         width: 60%;\n  //       }\n`;\n\nconst UserListContainer = styled(Container)`\n  z-index: ${(props) => (props.showUsers ? Theme.zIndex.modal : \"0\")};\n  position: absolute;\n  height: 75vh;\n  width: 50vw;\n`;\n\nconst Chat = ({\n  room = false,\n  user,\n  closeChatHandler,\n  openBackdrop,\n  socket,\n  showUsers,\n  setShowUsers,\n}) => {\n  const [username, setUsername] = useState(user.displayName);\n  // Controls which chat room is displayed on screen\n  const [currentRoom, setRoom] = useState(room);\n  // Users in current room, self and others\n  const [users, setUsers] = useState(\"\");\n  // A count of the above data\n  const [onlineUserCount, setOnlineUserCount] = useState(0);\n  // Message  you are currently typing, yet to be sent to server/other users\n  const [message, setMessage] = useState(\"\");\n  // Messages in memory, including messages retrieved from server and temporary messages from SYSTEM\n  const [messages, setMessages] = useState([]);\n\n  // PROD\n  // const ENDPOINT = \"https://react-chat-network-app.herokuapp.com/\";\n  // TESTING\n  const ENDPOINT = \"localhost:5000\";\n\n  useEffect(() => {\n    // OLD LOGIC - Fetches username, room from url. Convert to state.\n    // const { name, room } = queryString.parse(location.search);\n\n    /* socket = io(ENDPOINT); */\n    // Sets state equal to current room, stores Username\n    setRoom(currentRoom);\n    // setUsername(username);\n\n    // Fires socket.io \"join\" event when room state changes.\n    //\n    // socket.emit(\"join\", { name: username, room: currentRoom }, (error) => {\n    //     if (error) {\n    //         alert(error);\n    //     }\n    // });\n  }, [ENDPOINT, currentRoom]);\n\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n\n    // Message history of room you are currently in, retrieved from server\n    socket.on(\"messageHistory\", (messageHistory) => {\n      if (messageHistory) {\n        sortByDate(messageHistory);\n        messageHistory.forEach((msg) => {\n          if (msg.time) {\n            setMessages((messages) => [...messages, msg]);\n          }\n        });\n      }\n    });\n\n    // List of currently active users in room\n    socket.on(\"roomData\", ({ room, users, onlineUserCount }) => {\n      console.log(`Room Data: \\n${users}`);\n      setUsers(users);\n      setOnlineUserCount(users.length);\n      console.log(users);\n    });\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    console.log({\n      content: {\n        text: message,\n        user: username,\n        time: getCurrentTime(),\n        room: currentRoom,\n      },\n    });\n    if (message) {\n      socket.emit(\n        \"sendMessage\",\n        {\n          content: {\n            text: message,\n            user: username,\n            time: getCurrentTime(),\n            room: currentRoom,\n          },\n        },\n        () => setMessage(\"\")\n      );\n      const newMessage = {\n        text: message,\n        time: getCurrentTime(),\n        user: username,\n        room: currentRoom,\n      };\n      setMessages((messages) => [...messages, newMessage]);\n    }\n  };\n\n  // Opens user list\n  const showUserDisplay = () => {\n    openBackdrop();\n    setShowUsers(true);\n  };\n\n  return (\n    <OuterContainer>\n      <Container showUsers={showUsers}>\n        <InfoBar\n          room={currentRoom}\n          userCount={onlineUserCount}\n          showUserList={showUserDisplay}\n          closeChatHandler={() => closeChatHandler(currentRoom)}\n        />\n        <Messages messages={messages} name={username} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </Container>\n      <UserListContainer showUsers={showUsers}>\n        <UserList users={users} location={currentRoom} />\n      </UserListContainer>\n    </OuterContainer>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}
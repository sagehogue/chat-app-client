{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willp\\\\Desktop\\\\chat-app-sage\\\\chat-app-client-master\\\\src\\\\pages\\\\LoginPage\\\\LoginPage.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\"; // Firebase App (the core Firebase SDK) is always required and must be listed before other Firebase SDKs\n\nimport * as firebase from \"firebase/app\"; // Add the Firebase services that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"../../firebaseConfig\";\nimport { AuthContext, firebaseController } from \"../../App\";\nimport * as EmailValidator from \"email-validator\";\nimport background from \"../../img/background.jpg\";\nimport styled from \"styled-components\";\nimport { SubmitButton } from \"../../components/UI/Button/Button\";\nimport SignInButton from \"./SignInButton/SignInButton\";\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport RegisterButton from \"./RegisterButton/RegisterButton\";\nimport RegisterForm from \"./RegisterForm/RegisterForm\";\nimport GlobalStyle from \"../../util/GlobalStyles/GlobalStyles\";\nimport { fadeIn } from \"../../components/UI/Animations/Animations\";\nimport { Redirect } from \"react-router\"; // TODOS\n// 1.) Create a back button for the registration screen in case someone wants to cancel it and sign in.\n// 2.) Handle invalid email submissions - create some element that will tell them to correct it, and what the requirements are.\n\nconst AuthButtons = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst OuterFormContainer = styled.div`\n  display: flex;\n  overflow: hidden;\n  justify-content: center;\n  text-align: center;\n  height: 100vh;\n  align-items: center;\n  background: url(${background});\n  background-size: cover;\n  @media (min-width: 320px) and (max-width: 480px) {\n    height: 100%;\n  }\n`;\nconst FormStyleContainer = styled.div`\n  height: 65%;\n  width: 65%;\n  background-color: rgba(51, 51, 51, 0.75);\n  border-radius: 2%;\n  @media screen and (min-width: 800px) {\n    max-width: 45vw;\n  }\n  @media screen and (min-width: 1100px) {\n    max-width: 35vw;\n  }\n  @media screen and (min-width: 1300px) {\n    max-width: 25vw;\n  }\n  @media screen and (min-width: 1600px) {\n    max-width: 20vw;\n  }\n`;\nconst InnerFormContainer = styled.div`\n  margin: auto;\n  justify-content: center;\n  position: relative;\n  height: 60rem;\n  width: 25rem;\n  @media (min-width: 240px) and (max-width: 750px) {\n    width: 90%;\n  }\n  @media screen and (min-width: 750px) {\n    width: 75%;\n  }\n  @media screen and (min-width: 1100px) {\n    width: 65%;\n  }\n\n  @media screen and (min-width: 1600px) {\n    width: 60%;\n  }\n`;\nconst Heading = styled.h1`\n  color: white;\n  font-size: 3rem;\n  font-family: \"Josefin Sans\", sans-serif;\n  padding-bottom: 10px;\n  margin-top: 1rem;\n  @media (max-width: 300px) {\n    font-size: 2.5rem;\n  }\n`;\nconst EmailInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\nconst PasswordInput = styled.input`\n  border-radius: 0;\n  padding: 15px 20px;\n  width: 100%;\n  margin-top: 20px;\n  border-radius: 5px;\n  outline: none;\n  border: none;\n`;\nexport default function LoginPage({\n  socket\n}) {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [heading, setHeading] = useState(\"Chatter\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authenticated, setAuthenticated] = useState(false);\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\n  let userAuth = useContext(AuthContext);\n\n  if (userAuth.loggedIn) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 12\n      }\n    });\n  }\n\n  console.log(socket); // socket.emit(\"on-login-page\");\n\n  const handleDisplayRegisterForm = () => {\n    // changes the variable that controls which form is displayed\n    setShowRegisterForm(true);\n    setHeading(\"Registration\");\n  };\n\n  const handleLoginSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const email = form.email.value;\n    const password = form.password.value;\n    firebase.auth().signInWithEmailAndPassword(email, password).then(() => {}).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n    });\n  };\n\n  const handleRegisterSubmit = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.target;\n    const email = form.email.value;\n    const username = form.username.value;\n    const password = form.password.value;\n    const validEmail = EmailValidator.validate(email); // VALIDATION GOES HERE\n    // IMPLEMENT ME\n\n    if (validEmail) {\n      // Create new account\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(res => {\n        const user = firebase.auth().currentUser;\n        socket.emit(\"register-user\", {\n          uid: user.uid,\n          displayName: username,\n          email\n        }); // This is how you update properties on the profile.\n\n        user.updateProfile({\n          displayName: username\n        }).then(function () {\n          // Update successful.\n          socket.emit(); // Code to prepare the room join screen goes here.\n        }).catch(function (error) {\n          return alert(\"Error! Account failed to update. Error: \" + error);\n        });\n        setHeading(\"Chatter\");\n      }); // .catch(function (error) {\n      //   // Handle Errors here.\n      //   var errorCode = error.code;\n      //   var errorMessage = error.message;\n      //   alert(\n      //     `ERROR ${errorCode}\\n\n      //   ${error.message}`\n      //   );\n      //   // ...\n      // });\n    } else {\n      alert(\"ERROR\\nPlease enter a valid email\\nAddress must be formatted <6+ letters>@<domain>.<tld>\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(OuterFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormStyleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InnerFormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoginForm, {\n    showRegisterForm: showRegisterForm,\n    onSubmit: handleLoginSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, `${heading}`), /*#__PURE__*/React.createElement(EmailInput, {\n    required: true,\n    placeholder: \"Email\",\n    name: \"email\",\n    type: \"text\",\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PasswordInput, {\n    required: true,\n    placeholder: \"Password\",\n    name: \"password\",\n    type: \"password\",\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AuthButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SignInButton, {\n    type: \"submit\",\n    value: \"Sign In\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RegisterButton, {\n    clickHandler: () => handleDisplayRegisterForm(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(RegisterForm, {\n    heading: heading,\n    showRegisterForm: showRegisterForm,\n    handleSubmit: handleRegisterSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Willp/Desktop/chat-app-sage/chat-app-client-master/src/pages/LoginPage/LoginPage.js"],"names":["React","useState","useEffect","useContext","Link","firebase","firebaseConfig","AuthContext","firebaseController","EmailValidator","background","styled","SubmitButton","SignInButton","LoginForm","RegisterButton","RegisterForm","GlobalStyle","fadeIn","Redirect","AuthButtons","div","OuterFormContainer","FormStyleContainer","InnerFormContainer","Heading","h1","EmailInput","input","PasswordInput","LoginPage","socket","name","setName","room","setRoom","heading","setHeading","email","setEmail","password","setPassword","authenticated","setAuthenticated","showRegisterForm","setShowRegisterForm","userAuth","loggedIn","console","log","handleDisplayRegisterForm","handleLoginSubmit","e","preventDefault","form","target","value","auth","signInWithEmailAndPassword","then","catch","error","errorCode","code","errorMessage","message","handleRegisterSubmit","stopPropagation","username","validEmail","validate","createUserWithEmailAndPassword","res","user","currentUser","emit","uid","displayName","updateProfile","alert","event"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// Firebase App (the core Firebase SDK) is always required and must be listed before other Firebase SDKs\r\nimport * as firebase from \"firebase/app\";\r\n// Add the Firebase services that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport firebaseConfig from \"../../firebaseConfig\";\r\nimport { AuthContext, firebaseController } from \"../../App\";\r\nimport * as EmailValidator from \"email-validator\";\r\n\r\nimport background from \"../../img/background.jpg\";\r\nimport styled from \"styled-components\";\r\nimport { SubmitButton } from \"../../components/UI/Button/Button\";\r\nimport SignInButton from \"./SignInButton/SignInButton\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport RegisterButton from \"./RegisterButton/RegisterButton\";\r\nimport RegisterForm from \"./RegisterForm/RegisterForm\";\r\nimport GlobalStyle from \"../../util/GlobalStyles/GlobalStyles\";\r\nimport { fadeIn } from \"../../components/UI/Animations/Animations\";\r\n\r\nimport { Redirect } from \"react-router\";\r\n\r\n// TODOS\r\n// 1.) Create a back button for the registration screen in case someone wants to cancel it and sign in.\r\n// 2.) Handle invalid email submissions - create some element that will tell them to correct it, and what the requirements are.\r\n\r\nconst AuthButtons = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst OuterFormContainer = styled.div`\r\n  display: flex;\r\n  overflow: hidden;\r\n  justify-content: center;\r\n  text-align: center;\r\n  height: 100vh;\r\n  align-items: center;\r\n  background: url(${background});\r\n  background-size: cover;\r\n  @media (min-width: 320px) and (max-width: 480px) {\r\n    height: 100%;\r\n  }\r\n`;\r\nconst FormStyleContainer = styled.div`\r\n  height: 65%;\r\n  width: 65%;\r\n  background-color: rgba(51, 51, 51, 0.75);\r\n  border-radius: 2%;\r\n  @media screen and (min-width: 800px) {\r\n    max-width: 45vw;\r\n  }\r\n  @media screen and (min-width: 1100px) {\r\n    max-width: 35vw;\r\n  }\r\n  @media screen and (min-width: 1300px) {\r\n    max-width: 25vw;\r\n  }\r\n  @media screen and (min-width: 1600px) {\r\n    max-width: 20vw;\r\n  }\r\n`;\r\nconst InnerFormContainer = styled.div`\r\n  margin: auto;\r\n  justify-content: center;\r\n  position: relative;\r\n  height: 60rem;\r\n  width: 25rem;\r\n  @media (min-width: 240px) and (max-width: 750px) {\r\n    width: 90%;\r\n  }\r\n  @media screen and (min-width: 750px) {\r\n    width: 75%;\r\n  }\r\n  @media screen and (min-width: 1100px) {\r\n    width: 65%;\r\n  }\r\n\r\n  @media screen and (min-width: 1600px) {\r\n    width: 60%;\r\n  }\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  color: white;\r\n  font-size: 3rem;\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  padding-bottom: 10px;\r\n  margin-top: 1rem;\r\n  @media (max-width: 300px) {\r\n    font-size: 2.5rem;\r\n  }\r\n`;\r\nconst EmailInput = styled.input`\r\n  border-radius: 0;\r\n  padding: 15px 20px;\r\n  width: 100%;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  border: none;\r\n`;\r\n\r\nconst PasswordInput = styled.input`\r\n  border-radius: 0;\r\n  padding: 15px 20px;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  border: none;\r\n`;\r\n\r\nexport default function LoginPage({ socket }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [heading, setHeading] = useState(\"Chatter\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\r\n  let userAuth = useContext(AuthContext);\r\n  if (userAuth.loggedIn) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n  console.log(socket);\r\n\r\n  // socket.emit(\"on-login-page\");\r\n\r\n  const handleDisplayRegisterForm = () => {\r\n    // changes the variable that controls which form is displayed\r\n    setShowRegisterForm(true);\r\n    setHeading(\"Registration\");\r\n  };\r\n\r\n  const handleLoginSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const form = e.target;\r\n    const email = form.email.value;\r\n    const password = form.password.value;\r\n\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then(() => {})\r\n      .catch(function (error) {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // ...\r\n      });\r\n  };\r\n\r\n  const handleRegisterSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const form = e.target;\r\n    const email = form.email.value;\r\n    const username = form.username.value;\r\n    const password = form.password.value;\r\n    const validEmail = EmailValidator.validate(email);\r\n\r\n    // VALIDATION GOES HERE\r\n\r\n    // IMPLEMENT ME\r\n    if (validEmail) {\r\n      // Create new account\r\n      firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then((res) => {\r\n          const user = firebase.auth().currentUser;\r\n          socket.emit(\"register-user\", {\r\n            uid: user.uid,\r\n            displayName: username,\r\n            email,\r\n          });\r\n          // This is how you update properties on the profile.\r\n          user\r\n            .updateProfile({\r\n              displayName: username,\r\n            })\r\n            .then(function () {\r\n              // Update successful.\r\n              socket.emit();\r\n              // Code to prepare the room join screen goes here.\r\n            })\r\n            .catch(function (error) {\r\n              return alert(\"Error! Account failed to update. Error: \" + error);\r\n            });\r\n          setHeading(\"Chatter\");\r\n        });\r\n      // .catch(function (error) {\r\n      //   // Handle Errors here.\r\n      //   var errorCode = error.code;\r\n      //   var errorMessage = error.message;\r\n      //   alert(\r\n      //     `ERROR ${errorCode}\\n\r\n      //   ${error.message}`\r\n      //   );\r\n      //   // ...\r\n      // });\r\n    } else {\r\n      alert(\r\n        \"ERROR\\nPlease enter a valid email\\nAddress must be formatted <6+ letters>@<domain>.<tld>\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <OuterFormContainer>\r\n      <GlobalStyle />\r\n      <FormStyleContainer>\r\n        <InnerFormContainer>\r\n          <LoginForm\r\n            showRegisterForm={showRegisterForm}\r\n            onSubmit={handleLoginSubmit}\r\n          >\r\n            <Heading>{`${heading}`}</Heading>\r\n            <EmailInput\r\n              required\r\n              placeholder=\"Email\"\r\n              name=\"email\"\r\n              type=\"text\"\r\n              onChange={(event) => setEmail(event.target.value)}\r\n            />\r\n\r\n            <PasswordInput\r\n              required\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              onChange={(event) => setPassword(event.target.value)}\r\n            />\r\n\r\n            <AuthButtons>\r\n              <SignInButton type=\"submit\" value=\"Sign In\" />\r\n              <RegisterButton\r\n                clickHandler={() => handleDisplayRegisterForm()}\r\n              />\r\n            </AuthButtons>\r\n          </LoginForm>\r\n          <RegisterForm\r\n            heading={heading}\r\n            showRegisterForm={showRegisterForm}\r\n            handleSubmit={handleRegisterSubmit}\r\n          />\r\n        </InnerFormContainer>\r\n      </FormStyleContainer>\r\n    </OuterFormContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}